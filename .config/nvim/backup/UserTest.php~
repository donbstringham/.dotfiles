<?php
declare(strict_types=1);

namespace Tests\Domain\Item;

use App\Domain\Item\Item;
use Tests\TestCase;

class ItemTest extends TestCase
{
    public function itemProvider()
    {
      return [
        ['1','Asus AsusPro Advanced BU401LA-FA271G Dark Grey', 'Laptop', 'Asus AsusPro Advanced BU401LA-FA271G Dark Grey, 14", Core i5-4210U, 4GB, 128GB SSD, Win7 Pro 64bit, ENG', 1139.54],
        ['2', 'Lenovo V110-15ISK', 'Laptop', 'Lenovo V110-15ISK, 15.6" HD, Core i3-6006U, 4GB, 128GB SSD, Windows 10 Pro', 454.73],
        ['3', 'Acer Aspire 3 A315-51', 'Laptop', 'Acer Aspire 3 A315-51, 15.6" HD, Core i3-6006U, 4GB, 1TB, Windows 10 Home', 436.29],
        ];
    }

    /**
     * @dataProvider itemProvider
     * @param int    $id
     * @param string $name
     * @param string $type
     * @param string $description
     * @param float  $cost
     */
    public function testGetters(int $id, string $name, string $type, string $description, float $cost)
    {
        $item = new Item($id, $name, $type, $description, $cost);

        $this->assertEquals($id, $item->getId());
        $this->assertEquals($name, $item->getItemname());
        $this->assertEquals($type, $item->getType());
        $this->assertEquals($description, $item->getDescription());
        $this->assertEquals($cost, $item->getCost());
    }

    /**
     * @dataProvider itemProvider
     * @param int    $id
     * @param string $name
     * @param string $type
     * @param string $description
     * @param float  $cost
     */
    public function testJsonSerialize(int $id, string $name, string $type, string $description, float $cost)
    {
        $item = new Item($id, $name, $type, $description, $cost);

        $expectedPayload = json_encode([
            'id' => $id,
            'name' => $name,
            'type' => $type,
            'description' => $description,
            'cost' => $cost,
        ]);

        $this->assertEquals($expectedPayload, json_encode($item));
    }
}
